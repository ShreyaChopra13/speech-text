# -*- coding: utf-8 -*-
"""SR2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VCxpQCYCHzqgQHDu6jbBC5KdZ_-sSvbO
"""

import os

import IPython
# import matplotlib
import requests
import torch
import torchaudio
def srmodel():
    # matplotlib.rcParams["figure.figsize"] = [16.0, 4.8]

    torch.random.manual_seed(0)
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    # print(torch.__version__)
    # print(torchaudio.__version__)
    # print(device)

    # SPEECH_URL = "https://pytorch-tutorial-assets.s3.amazonaws.com/VOiCES_devkit/source-16k/train/sp0307/Lab41-SRI-VOiCES-src-sp0307-ch127535-sg0042.wav"  # noqa: E501
    # import os

    # folder path
    dir_path = './media'

    # list to store files
    res = []

    # Iterate directory
    for path in os.listdir(dir_path):
        # check if current path is a file
        if os.path.isfile(os.path.join(dir_path, path)):
            res.append(path)
    # print(res[0])      
    # os.rename(res[0],'speech1.wav')
    # print(res)
# 
    # SPEECH_FILE="media/speech1.wav"
    SPEECH_FILE='media/'+res[0]
    
    # SPEECH_FILE = "media/speech.wav"

 

    bundle = torchaudio.pipelines.WAV2VEC2_ASR_BASE_960H

    print("Sample Rate:", bundle.sample_rate)

    print("Labels:", bundle.get_labels())

    model = bundle.get_model().to(device)

    print(model.__class__)

    # IPython.display.Audio(SPEECH_FILE)

    waveform, sample_rate = torchaudio.load(SPEECH_FILE)
    waveform = waveform.to(device)

    if sample_rate != bundle.sample_rate:
        waveform = torchaudio.functional.resample(waveform, sample_rate, bundle.sample_rate)

    with torch.inference_mode():
        features, _ = model.extract_features(waveform)

    with torch.inference_mode():
        emission, _ = model(waveform)

    print("Class labels:", bundle.get_labels())

    class GreedyCTCDecoder(torch.nn.Module):
        def __init__(self, labels, blank=0):
            super().__init__()
            self.labels = labels
            self.blank = blank

        def forward(self, emission: torch.Tensor) -> str:
            indices = torch.argmax(emission, dim=-1)  # [num_seq,]
            indices = torch.unique_consecutive(indices, dim=-1)
            indices = [i for i in indices if i != self.blank]
            return "".join([self.labels[i] for i in indices])

    decoder = GreedyCTCDecoder(labels=bundle.get_labels())
    transcript = decoder(emission[0])

    # print(transcript)
    # import os
 
    dir = './media'
    for f in os.listdir(dir):
        os.remove(os.path.join(dir, f))
    #     print(' deleted')
 
    return(transcript)
    # IPython.display.Audio(SPEECH_FILE)
# print(srmodel())
